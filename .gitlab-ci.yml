# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:3.7

stages:
  - test
  - quality
  - package
  - deploy
  - performance

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
#services:
#  - mysql:latest
#  - postgres:latest

variables:
#  POSTGRES_DB: database_name
  PLAYWD: ip172-18-0-7-bv3r0k2g770000f0cppg
  PLAYWD_PRD: ip172-18-0-96-bv3r0k2g770000f0cppg
  DOCKER_HOST: tcp://docker:2375
  AUTHOR: "Guillaume Rémy"

# This folder is cached between builds
# http://docs.gitlab.com/ee/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

test:
  stage: test
  before_script:
    - python -V  # Print out python version for debugging
    # Uncomment next line if your Django app needs a JS runtime:
    # - apt-get update -q && apt-get install nodejs -yqq
    - pip install -r requirements.txt
    - export AUTHOR="Guillaume Rémy"
    - export LIFE_QUOTE="Citation du jour."
    - export PURPOSE="Sample django app with Docker"
  #variables:
  #  DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - python manage.py test

code_quality_job:
  stage: quality
  image: docker:stable
  allow_failure: true
  services:
    - docker:stable-dind
  before_script:
    - mkdir codequality-results
  script:
    - docker run
      --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate analyze -f html -e pep8 > ./codequality-results/index.html
  artifacts:
    paths:
      - codequality-results/

package_job:
  stage: package
  services:
    - docker:stable-dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --build-arg AUTHOR="$AUTHOR" .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  image: docker:stable

deploy_staging_job:
  stage: deploy
  image: docker:stable
  before_script:
    - export DOCKER_HOST=tcp://$PLAYWD.direct.labs.play-with-docker.com:2375
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - if docker rm -f python-django ; then echo "Existing application stopped"; fi
  script:
    - docker run --name python-django -d -p 8080:8000 -e PLAYWD="$PLAYWD" -e PURPOSE="A simple Django app" -e LIFE_QUOTE="Even the tallest and most formidable of towers was once just a pile of bricks." $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: staging
    url: http://$PLAYWD-8080.direct.labs.play-with-docker.com/admin

performance_job:
  stage: performance
  image: docker:git
  variables:
    URL: http://$PLAYWD-8080.direct.labs.play-with-docker.com/admin
  services:
    - docker:stable-dind
  script:
    - apk add --no-cache curl
    - x=1; while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $URL)" != "200" && "$(curl -s -o /dev/null -w ''%{http_code}'' $URL)" != "301" && $x -le 60 ]]; do sleep 5; echo $(( x++ )); done || false
    - mkdir gitlab-exporter
    - wget -O ./gitlab-exporter/index.js https://gitlab.com/gitlab-org/gl-performance/raw/master/index.js
    - mkdir sitespeed-results
    - docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:15.7.2 --plugins.add ./gitlab-exporter --outputFolder sitespeed-results -b chrome $URL
    - mv sitespeed-results/data/performance.json performance.json
  artifacts:
    paths:
      - sitespeed-results/
    reports:
      performance: performance.json

deploy_production_job:
  stage: deploy
  image: docker:stable
  when: manual
  before_script:
    - export DOCKER_HOST=tcp://$PLAYWD_PRD.direct.labs.play-with-docker.com:2375
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - if docker rm -f python-django ; then echo "Existing application stopped"; fi
  script:
    - docker run --name python-django -d -p 8080:8000 -e PLAYWD="$PLAYWD_PRD" -e PURPOSE="A simple Django app" -e LIFE_QUOTE="Even the tallest and most formidable of towers was once just a pile of bricks." $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: production
    url: http://$PLAYWD_PRD-8080.direct.labs.play-with-docker.com/admin

