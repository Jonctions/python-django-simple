# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

variables:
  # DJANGO_CONFIG: "test"
  MYSQL_DATABASE: $MYSQL_DB
  MYSQL_ROOT_PASSWORD: $MYSQL_PASS
  MYSQL_USER: $MYSQL_USER
  MYSQL_PASSWORD: $MYSQL_PASS
  LIFE_QUOTE: "Life is good"
  PURPOSE: "Simple Django app"
  PLAYWD: "ip172-18-1-36-ci64emufml8g00e0v9dg"

default:
  image: ubuntu:20.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  #services:
  #  - mysql:8.0
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools python3.8 python3-pip
    - apt -y upgrade
    - pip3 install -r requirements.txt

stages:
  - "test"
#  - "quality"
  - "package"
  - "deploy"
  - "performance"

django-tests:
  stage: test
  script:
    # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
    #- echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python3 manage.py test

#code_quality_job:
#  stage: quality
#  image: docker:stable
#  allow_failure: true
#  services:
#    - docker:stable-dind
#  before_script:
#    - mkdir codequality-results
#  script:
#    - docker run
#        --env CODECLIMATE_CODE="/code"
#        --volume "$PWD":/code
#        --volume /var/run/docker.sock:/var/run/docker.sock
#        --volume /tmp/cc:/tmp/cc
#        codeclimate/codeclimate analyze -f html > ./codequality-results/index.html
#  artifacts:
#    paths:
#      - codequality-results/

package_job:
  stage: package
  services:
    - docker:stable-dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - sed -i "s/^ALLOWED_HOSTS = \[.*/ALLOWED_HOSTS = ['proxmox.qualibre-formations.fr']/" config/settings.py
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --build-arg AUTHOR="$AUTHOR" .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  image: docker:stable

deploy_staging_job:
  stage: deploy
  image: docker:stable
  before_script:
    - export DOCKER_HOST=tcp://proxmox.qualibre-formations.fr:2375
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - if docker rm -f python-django-guillaume-remy ; then echo "Existing application stopped"; fi
  script:
    - docker run --name python-django-guillaume-remy -d -p 8080:8000 -e PURPOSE -e LIFE_QUOTE $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: staging
    url: http://proxmox.qualibre-formations.fr:8080/admin

performance_job:
  stage: performance
  image: docker:git
  variables:
    URL: http://proxmox.qualibre-formations.fr:8080/admin
  services:
    - docker:stable-dind
  before_script:
    - echo "true"
  script:
    - apk add --no-cache curl
    - x=1; while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' $URL)" != "200" && "$(curl -s -o /dev/null -w ''%{http_code}'' $URL)" != "301" && $x -le 60 ]]; do sleep 5; echo $(( x++ )); done || false
    - mkdir sitespeed-results
    - docker run --shm-size=1g --rm -v "$(pwd)":/sitespeed.io sitespeedio/sitespeed.io:26.1.0 --outputFolder sitespeed-results $URL
  artifacts:
    paths:
      - sitespeed-results/